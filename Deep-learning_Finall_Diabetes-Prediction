{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c1f2e703",
   "metadata": {
    "papermill": {
     "duration": 0.005445,
     "end_time": "2024-12-30T18:27:48.725360",
     "exception": false,
     "start_time": "2024-12-30T18:27:48.719915",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**IMPORT**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8579ff4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-30T18:27:48.736638Z",
     "iopub.status.busy": "2024-12-30T18:27:48.736179Z",
     "iopub.status.idle": "2024-12-30T18:28:02.760049Z",
     "shell.execute_reply": "2024-12-30T18:28:02.758952Z"
    },
    "papermill": {
     "duration": 14.032161,
     "end_time": "2024-12-30T18:28:02.762477",
     "exception": false,
     "start_time": "2024-12-30T18:27:48.730316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.keras.models import Model,load_model\n",
    "from tensorflow.keras.layers import Input, Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "380c9ddd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.775044Z",
     "iopub.status.busy": "2024-12-30T18:28:02.774101Z",
     "iopub.status.idle": "2024-12-30T18:28:02.810627Z",
     "shell.execute_reply": "2024-12-30T18:28:02.809646Z"
    },
    "papermill": {
     "duration": 0.044806,
     "end_time": "2024-12-30T18:28:02.812767",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.767961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"../input/pima-indians-diabetes-database/diabetes.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06c98e88",
   "metadata": {
    "papermill": {
     "duration": 0.004811,
     "end_time": "2024-12-30T18:28:02.822602",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.817791",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "****Define feature columns and label****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e854ec79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.834304Z",
     "iopub.status.busy": "2024-12-30T18:28:02.833387Z",
     "iopub.status.idle": "2024-12-30T18:28:02.844128Z",
     "shell.execute_reply": "2024-12-30T18:28:02.843171Z"
    },
    "papermill": {
     "duration": 0.018629,
     "end_time": "2024-12-30T18:28:02.846076",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.827447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', \n",
    "                'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']\n",
    "X = data[feature_cols]  # Predictors (features)\n",
    "y = data['Outcome']     # Label (target variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6da7e0e2",
   "metadata": {
    "papermill": {
     "duration": 0.004686,
     "end_time": "2024-12-30T18:28:02.856871",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.852185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Normalize the features**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7c71338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.868483Z",
     "iopub.status.busy": "2024-12-30T18:28:02.867563Z",
     "iopub.status.idle": "2024-12-30T18:28:02.885172Z",
     "shell.execute_reply": "2024-12-30T18:28:02.884242Z"
    },
    "papermill": {
     "duration": 0.025554,
     "end_time": "2024-12-30T18:28:02.887209",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.861655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.743719</td>\n",
       "      <td>0.590164</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500745</td>\n",
       "      <td>0.234415</td>\n",
       "      <td>0.483333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.427136</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.292929</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.396423</td>\n",
       "      <td>0.116567</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.470588</td>\n",
       "      <td>0.919598</td>\n",
       "      <td>0.524590</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.347243</td>\n",
       "      <td>0.253629</td>\n",
       "      <td>0.183333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.447236</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.232323</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.418778</td>\n",
       "      <td>0.038002</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.688442</td>\n",
       "      <td>0.327869</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.198582</td>\n",
       "      <td>0.642325</td>\n",
       "      <td>0.943638</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies   Glucose  BloodPressure  SkinThickness   Insulin       BMI  \\\n",
       "0     0.352941  0.743719       0.590164       0.353535  0.000000  0.500745   \n",
       "1     0.058824  0.427136       0.540984       0.292929  0.000000  0.396423   \n",
       "2     0.470588  0.919598       0.524590       0.000000  0.000000  0.347243   \n",
       "3     0.058824  0.447236       0.540984       0.232323  0.111111  0.418778   \n",
       "4     0.000000  0.688442       0.327869       0.353535  0.198582  0.642325   \n",
       "\n",
       "   DiabetesPedigreeFunction       Age  \n",
       "0                  0.234415  0.483333  \n",
       "1                  0.116567  0.166667  \n",
       "2                  0.253629  0.183333  \n",
       "3                  0.038002  0.000000  \n",
       "4                  0.943638  0.200000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm = X.apply(lambda x: (x - x.min()) / (x.max() - x.min()))\n",
    "X_norm.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab0bc869",
   "metadata": {
    "papermill": {
     "duration": 0.004832,
     "end_time": "2024-12-30T18:28:02.897181",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.892349",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Split data into training and test sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2ce13567",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.909067Z",
     "iopub.status.busy": "2024-12-30T18:28:02.908216Z",
     "iopub.status.idle": "2024-12-30T18:28:02.916274Z",
     "shell.execute_reply": "2024-12-30T18:28:02.915497Z"
    },
    "papermill": {
     "duration": 0.016114,
     "end_time": "2024-12-30T18:28:02.918286",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.902172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9636a34e",
   "metadata": {
    "papermill": {
     "duration": 0.004826,
     "end_time": "2024-12-30T18:28:02.928311",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.923485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**One-hot encode labels for training and testing sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "967a9529",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.940075Z",
     "iopub.status.busy": "2024-12-30T18:28:02.939215Z",
     "iopub.status.idle": "2024-12-30T18:28:02.944334Z",
     "shell.execute_reply": "2024-12-30T18:28:02.943553Z"
    },
    "papermill": {
     "duration": 0.01292,
     "end_time": "2024-12-30T18:28:02.946167",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.933247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "y_train = to_categorical(y_train, num_classes=2)\n",
    "y_test = to_categorical(y_test, num_classes=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c403ef9",
   "metadata": {
    "papermill": {
     "duration": 0.004883,
     "end_time": "2024-12-30T18:28:02.956128",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.951245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Initialize the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb28f036",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:02.967743Z",
     "iopub.status.busy": "2024-12-30T18:28:02.967099Z",
     "iopub.status.idle": "2024-12-30T18:28:03.095378Z",
     "shell.execute_reply": "2024-12-30T18:28:03.094354Z"
    },
    "papermill": {
     "duration": 0.136722,
     "end_time": "2024-12-30T18:28:03.097748",
     "exception": false,
     "start_time": "2024-12-30T18:28:02.961026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "inputs = Input(shape=(X_train.shape[1],))\n",
    "# Hidden layers\n",
    "x = Dense(128, activation='relu')(inputs)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "x = Dense(64, activation='relu')(x)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "x = Dense(32, activation='relu')(x)\n",
    "x = BatchNormalization()(x)\n",
    "x = Dropout(0.5)(x)\n",
    "\n",
    "# Output layer\n",
    "outputs = Dense(2, activation='softmax')(x)\n",
    "\n",
    "# Define the model\n",
    "model = Model(inputs=inputs, outputs=outputs)\n",
    "\n",
    "# Compile the model\n",
    "optimizer = Adam(learning_rate=0.005)\n",
    "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1633f26f",
   "metadata": {
    "papermill": {
     "duration": 0.004937,
     "end_time": "2024-12-30T18:28:03.107954",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.103017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Compile the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7a6dcd13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:03.119877Z",
     "iopub.status.busy": "2024-12-30T18:28:03.118988Z",
     "iopub.status.idle": "2024-12-30T18:28:03.123338Z",
     "shell.execute_reply": "2024-12-30T18:28:03.122411Z"
    },
    "papermill": {
     "duration": 0.012429,
     "end_time": "2024-12-30T18:28:03.125316",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.112887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6f78aba",
   "metadata": {
    "papermill": {
     "duration": 0.00489,
     "end_time": "2024-12-30T18:28:03.135292",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.130402",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Define early stopping monitor**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2d6032e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:03.146922Z",
     "iopub.status.busy": "2024-12-30T18:28:03.146203Z",
     "iopub.status.idle": "2024-12-30T18:28:03.150607Z",
     "shell.execute_reply": "2024-12-30T18:28:03.149679Z"
    },
    "papermill": {
     "duration": 0.012365,
     "end_time": "2024-12-30T18:28:03.152583",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.140218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "early_stopping_monitor = EarlyStopping(patience=10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a480c355",
   "metadata": {
    "papermill": {
     "duration": 0.004948,
     "end_time": "2024-12-30T18:28:03.162601",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.157653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Train the model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2c96f24e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:03.175116Z",
     "iopub.status.busy": "2024-12-30T18:28:03.174189Z",
     "iopub.status.idle": "2024-12-30T18:28:09.248797Z",
     "shell.execute_reply": "2024-12-30T18:28:09.247968Z"
    },
    "papermill": {
     "duration": 6.083359,
     "end_time": "2024-12-30T18:28:09.250981",
     "exception": false,
     "start_time": "2024-12-30T18:28:03.167622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 54ms/step - accuracy: 0.6023 - loss: 0.8779 - val_accuracy: 0.4629 - val_loss: 0.6908 - learning_rate: 0.0080\n",
      "Epoch 2/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6784 - loss: 0.7838 - val_accuracy: 0.5941 - val_loss: 0.6741 - learning_rate: 0.0080\n",
      "Epoch 3/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6760 - loss: 0.6625 - val_accuracy: 0.6658 - val_loss: 0.6500 - learning_rate: 0.0080\n",
      "Epoch 4/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8139 - loss: 0.4445 - val_accuracy: 0.7426 - val_loss: 0.6208 - learning_rate: 0.0080\n",
      "Epoch 5/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7795 - loss: 0.5039 - val_accuracy: 0.7327 - val_loss: 0.6109 - learning_rate: 0.0080\n",
      "Epoch 6/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7604 - loss: 0.4707 - val_accuracy: 0.7228 - val_loss: 0.6050 - learning_rate: 0.0056\n",
      "Epoch 7/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8285 - loss: 0.4136 - val_accuracy: 0.7252 - val_loss: 0.6020 - learning_rate: 0.0056\n",
      "Epoch 8/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7592 - loss: 0.5735 - val_accuracy: 0.7153 - val_loss: 0.6002 - learning_rate: 0.0056\n",
      "Epoch 9/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7765 - loss: 0.4577 - val_accuracy: 0.6931 - val_loss: 0.5952 - learning_rate: 0.0056\n",
      "Epoch 10/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7556 - loss: 0.4800 - val_accuracy: 0.6906 - val_loss: 0.5911 - learning_rate: 0.0056\n",
      "Epoch 11/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8161 - loss: 0.4314 - val_accuracy: 0.6906 - val_loss: 0.5863 - learning_rate: 0.0039\n",
      "Epoch 12/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8003 - loss: 0.4980 - val_accuracy: 0.6931 - val_loss: 0.5840 - learning_rate: 0.0039\n",
      "Epoch 13/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7991 - loss: 0.4442 - val_accuracy: 0.6856 - val_loss: 0.5817 - learning_rate: 0.0039\n",
      "Epoch 14/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8095 - loss: 0.4274 - val_accuracy: 0.6757 - val_loss: 0.5800 - learning_rate: 0.0039\n",
      "Epoch 15/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8143 - loss: 0.4381 - val_accuracy: 0.6733 - val_loss: 0.5790 - learning_rate: 0.0039\n",
      "Epoch 16/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8149 - loss: 0.4722 - val_accuracy: 0.6733 - val_loss: 0.5776 - learning_rate: 0.0027\n",
      "Epoch 17/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8187 - loss: 0.3941 - val_accuracy: 0.6757 - val_loss: 0.5751 - learning_rate: 0.0027\n",
      "Epoch 18/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8148 - loss: 0.3897 - val_accuracy: 0.6807 - val_loss: 0.5716 - learning_rate: 0.0027\n",
      "Epoch 19/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8457 - loss: 0.3343 - val_accuracy: 0.6832 - val_loss: 0.5686 - learning_rate: 0.0027\n",
      "Epoch 20/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7933 - loss: 0.3942 - val_accuracy: 0.6807 - val_loss: 0.5662 - learning_rate: 0.0027\n",
      "Epoch 21/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8773 - loss: 0.3314 - val_accuracy: 0.6832 - val_loss: 0.5636 - learning_rate: 0.0019\n",
      "Epoch 22/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8299 - loss: 0.4345 - val_accuracy: 0.6856 - val_loss: 0.5605 - learning_rate: 0.0019\n",
      "Epoch 23/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8216 - loss: 0.3498 - val_accuracy: 0.6881 - val_loss: 0.5592 - learning_rate: 0.0019\n",
      "Epoch 24/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8162 - loss: 0.3315 - val_accuracy: 0.6881 - val_loss: 0.5584 - learning_rate: 0.0019\n",
      "Epoch 25/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8505 - loss: 0.3596 - val_accuracy: 0.6931 - val_loss: 0.5574 - learning_rate: 0.0019\n",
      "Epoch 26/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8635 - loss: 0.3469 - val_accuracy: 0.6931 - val_loss: 0.5572 - learning_rate: 0.0013\n",
      "Epoch 27/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8269 - loss: 0.3573 - val_accuracy: 0.6931 - val_loss: 0.5565 - learning_rate: 0.0013\n",
      "Epoch 28/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.7952 - loss: 0.4286 - val_accuracy: 0.6931 - val_loss: 0.5558 - learning_rate: 0.0013\n",
      "Epoch 29/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8453 - loss: 0.3616 - val_accuracy: 0.6955 - val_loss: 0.5547 - learning_rate: 0.0013\n",
      "Epoch 30/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8124 - loss: 0.3931 - val_accuracy: 0.6955 - val_loss: 0.5547 - learning_rate: 0.0013\n",
      "Epoch 31/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8270 - loss: 0.3524 - val_accuracy: 0.6906 - val_loss: 0.5561 - learning_rate: 9.4119e-04\n",
      "Epoch 32/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8181 - loss: 0.3775 - val_accuracy: 0.6881 - val_loss: 0.5567 - learning_rate: 9.4119e-04\n",
      "Epoch 33/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8205 - loss: 0.3540 - val_accuracy: 0.6906 - val_loss: 0.5569 - learning_rate: 9.4119e-04\n",
      "Epoch 34/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8213 - loss: 0.3283 - val_accuracy: 0.6931 - val_loss: 0.5566 - learning_rate: 9.4119e-04\n",
      "Epoch 35/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.7905 - loss: 0.4033 - val_accuracy: 0.6856 - val_loss: 0.5581 - learning_rate: 9.4119e-04\n",
      "Epoch 36/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8461 - loss: 0.3595 - val_accuracy: 0.6832 - val_loss: 0.5598 - learning_rate: 6.5883e-04\n",
      "Epoch 37/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8083 - loss: 0.3839 - val_accuracy: 0.6832 - val_loss: 0.5607 - learning_rate: 6.5883e-04\n",
      "Epoch 38/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8008 - loss: 0.4666 - val_accuracy: 0.6832 - val_loss: 0.5613 - learning_rate: 6.5883e-04\n",
      "Epoch 39/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8381 - loss: 0.3513 - val_accuracy: 0.6881 - val_loss: 0.5612 - learning_rate: 6.5883e-04\n",
      "Epoch 40/200\n",
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.8258 - loss: 0.3822 - val_accuracy: 0.6931 - val_loss: 0.5614 - learning_rate: 6.5883e-04\n"
     ]
    }
   ],
   "source": [
    "# Learning rate scheduler (reduce the learning rate after each epoch)\n",
    "def lr_schedule(epoch):\n",
    "    return 0.008 * (0.7 ** (epoch // 5))\n",
    "\n",
    "lr_scheduler = LearningRateScheduler(lr_schedule)\n",
    "\n",
    "\n",
    "# Train the model\n",
    "model_training = model.fit(X_train, y_train, validation_split=0.7, epochs=200, \n",
    "                           callbacks=[early_stopping_monitor, lr_scheduler], verbose=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b14904f1",
   "metadata": {
    "papermill": {
     "duration": 0.011563,
     "end_time": "2024-12-30T18:28:09.275264",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.263701",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Visualize training and validation loss**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9f0b114a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:09.300805Z",
     "iopub.status.busy": "2024-12-30T18:28:09.300399Z",
     "iopub.status.idle": "2024-12-30T18:28:09.603581Z",
     "shell.execute_reply": "2024-12-30T18:28:09.602548Z"
    },
    "papermill": {
     "duration": 0.318405,
     "end_time": "2024-12-30T18:28:09.605784",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.287379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training and validation loss\n",
    "plt.plot(model_training.history['val_loss'], 'r', label='Validation Loss')\n",
    "plt.plot(model_training.history['loss'], 'b', label='Training Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.xticks(np.arange(0, len(model_training.history['loss']), step=2))\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bb883fc",
   "metadata": {
    "papermill": {
     "duration": 0.01205,
     "end_time": "2024-12-30T18:28:09.630241",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.618191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Save the trained model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "17ab061f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:09.656414Z",
     "iopub.status.busy": "2024-12-30T18:28:09.656030Z",
     "iopub.status.idle": "2024-12-30T18:28:09.705804Z",
     "shell.execute_reply": "2024-12-30T18:28:09.704945Z"
    },
    "papermill": {
     "duration": 0.065722,
     "end_time": "2024-12-30T18:28:09.708297",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.642575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('Diabetes_model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85934a4b",
   "metadata": {
    "papermill": {
     "duration": 0.011859,
     "end_time": "2024-12-30T18:28:09.732960",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.721101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Load the saved model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8a089d2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:09.758706Z",
     "iopub.status.busy": "2024-12-30T18:28:09.758316Z",
     "iopub.status.idle": "2024-12-30T18:28:09.859776Z",
     "shell.execute_reply": "2024-12-30T18:28:09.858865Z"
    },
    "papermill": {
     "duration": 0.116568,
     "end_time": "2024-12-30T18:28:09.861680",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.745112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,152</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">66</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m1,152\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │           \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │            \u001b[38;5;34m66\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,452</span> (48.64 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,452\u001b[0m (48.64 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,002</span> (46.88 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,002\u001b[0m (46.88 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> (1.75 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m448\u001b[0m (1.75 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (12.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2\u001b[0m (12.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = load_model('Diabetes_model.h5')\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4115b1e5",
   "metadata": {
    "papermill": {
     "duration": 0.012629,
     "end_time": "2024-12-30T18:28:09.887560",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.874931",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Make predictions on the test set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "200d8912",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-30T18:28:09.915369Z",
     "iopub.status.busy": "2024-12-30T18:28:09.914712Z",
     "iopub.status.idle": "2024-12-30T18:28:10.081192Z",
     "shell.execute_reply": "2024-12-30T18:28:10.080065Z"
    },
    "papermill": {
     "duration": 0.183007,
     "end_time": "2024-12-30T18:28:10.083447",
     "exception": false,
     "start_time": "2024-12-30T18:28:09.900440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step \n",
      "[0.22429629 0.15177675 0.12211408 0.19942507 0.32446647 0.29860598\n",
      " 0.09648485 0.36732072 0.38617152 0.4618705  0.23410463 0.58963263\n",
      " 0.22002265 0.25255057 0.13528186 0.29867303 0.13584279 0.11789479\n",
      " 0.5145087  0.2651279  0.20773451 0.1328813  0.35544258 0.11611213\n",
      " 0.31539416 0.6046205  0.1650738  0.11809831 0.1486319  0.1626642\n",
      " 0.5336536  0.50802785 0.46548414 0.4676228  0.3361607  0.4633407\n",
      " 0.7091445  0.28380087 0.3803557  0.3217478  0.12264132 0.42720637\n",
      " 0.39469028 0.22441445 0.10569613 0.36729866 0.453911   0.1625135\n",
      " 0.32390162 0.59004974 0.10818484 0.48313403 0.47599488 0.188239\n",
      " 0.12434594 0.10304353 0.48986074 0.12188137 0.25726476 0.42973298\n",
      " 0.51561064 0.22890803 0.30697075 0.20486926 0.11345688 0.39364797\n",
      " 0.11271856 0.31246063 0.11987762 0.3066836  0.4216272  0.12910953\n",
      " 0.22761385 0.12775603 0.14200293 0.41032654 0.25558084 0.23443814\n",
      " 0.13894294 0.15493287 0.38635075 0.16077136 0.12809616 0.25834215\n",
      " 0.1836794  0.5162215  0.53750736 0.24747407 0.14969862 0.11579722\n",
      " 0.11889637 0.13575481 0.11408433 0.31089437 0.25711033 0.4035488\n",
      " 0.23568024 0.1350025  0.23819895 0.12774532 0.5348654  0.10752726\n",
      " 0.36698687 0.29664648 0.38639268 0.189882   0.267493   0.5147954\n",
      " 0.17223886 0.3793645  0.13337903 0.27446166 0.17395532 0.5001071\n",
      " 0.15756841 0.23805957 0.49303457 0.17005104 0.11083275 0.2971309\n",
      " 0.11582997 0.23522073 0.23012215 0.14605938 0.20867677 0.3554254\n",
      " 0.20987809 0.5546     0.5192774  0.5814933  0.4899606  0.50067014\n",
      " 0.10860962 0.3500932  0.46768585 0.14200564 0.1418168  0.45916823\n",
      " 0.5164409  0.0896095  0.1393584  0.11196633 0.19792593 0.15391392\n",
      " 0.12695467 0.19681896 0.20251124 0.09691471 0.2770425  0.46921209\n",
      " 0.16746521 0.27356425 0.21616337 0.2018129  0.12403329 0.40464497\n",
      " 0.24176961 0.4945483  0.34419432 0.14319688 0.29695344 0.45493683\n",
      " 0.17768078 0.09308407 0.14074011 0.44008547 0.10091085 0.25071585\n",
      " 0.4926023  0.32949084 0.38205665 0.17334343 0.21176766 0.27187085\n",
      " 0.30827212 0.13095188 0.19348544 0.26226833 0.21883012 0.23873296\n",
      " 0.41568884 0.2771571  0.19396448 0.4009827  0.37832934 0.12799698\n",
      " 0.09519427 0.13346775 0.568786   0.30677202 0.1191787  0.12820603]\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Display the probabilities for class \"1\" (indicating diabetic)\n",
    "print(predictions[:, 1])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 228,
     "sourceId": 482,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.829418,
   "end_time": "2024-12-30T18:28:12.573587",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-30T18:27:45.744169",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
